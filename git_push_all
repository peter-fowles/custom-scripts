#!/bin/bash

# ==============================================================================
# git_push_all - A script to manage git operations across multiple repositories.
#
# Features:
#   - Commits and pushes changes in all Git repositories under a specified root.
#   - Supports a global commit message or a per-repository message in interactive mode.
#   - Allows adding directories to a global ignore list.
#   - Interactive mode (-p) to review and confirm changes for each repo individually.
#   - List mode (-l) to preview all repositories, showing change status.
#   - Verbose list mode (-lv) to also show changed files.
#   - Robust error handling for invalid arguments and non-Git directories.
#   - Color-coded output for improved readability.
#
# Usage:
#   gpa [<directory>] [-m <commit_message>] [-i <dir1,dir2,...>] [-l [-v]] [-p] [-h]
#
# Examples:
#   # Run in current directory with default automated message
#   gpa
#
#   # Run in a specific directory with a custom message
#   gpa ~/projects -m "Update scripts and configuration"
#
#   # Run in interactive mode, with a custom message offered as the default
#   gpa -p -m "Review and push"
#
#   # List all repos with pending changes, ignoring the 'temp' directory
#   gpa -l -i "temp"
#
#   # Verbose list, showing files changed
#   gpa -lv
#
# ==============================================================================

# Fix for "fatal: not a git repository" errors across filesystems.
export GIT_DISCOVERY_ACROSS_FILESYSTEM=1

# --- Configuration ---

# Define the default directories to ignore
default_ignored_dirs=("node_modules" "vendor" "build" ".venv")

# Define ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# --- Argument Parsing ---

global_commit_message=""
user_ignored_dirs=""
is_list_mode=false
is_verbose_list=false
is_interactive_mode=false
root_directory="$(pwd)"

timestamp=$(date +"%Y/%m/%d %H:%M:%S")
commit_message="Automated commit $timestamp"

usage() {
  echo -e "${BOLD}Usage:${NC} $0 [<directory>] [-m <commit_message>] [-i <dir1,dir2,...>] [-l [-v]] [-p] [-h]"
  echo ""
  echo -e "${BOLD}Arguments:${NC}"
  echo "  <directory>               Optional. The root directory to start searching for Git repos."
  echo "                            Defaults to the current working directory."
  echo ""
  echo -e "${BOLD}Options:${NC}"
  echo "  -m <commit_message>       Optional. Use a custom commit message for all repositories (overridden in interactive mode)."
  echo "  -i <dir1,dir2,...>        Optional. Append additional directories to the ignore list."
  echo "                            Provide a comma-separated string with no spaces."
  echo "  -l                        List all repositories and their status."
  echo "  -v                        Used with -l to give verbose output (list files changed)."
  echo "  -p                        Run in interactive mode, prompting per repository."
  echo "  -h                        Display this help message and exit."
  exit 1
}

# Parse command-line arguments and validate
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -m)
      if [[ -z "$2" || "$2" == -* ]]; then
        echo -e "${RED}Error:${NC} '-m' requires a commit message." >&2
        usage
      fi
      global_commit_message="$2"
      shift
      ;;
    -i)
      if [[ -z "$2" || "$2" == -* ]]; then
        echo -e "${RED}Error:${NC} '-i' requires a list of directories." >&2
        usage
      fi
      user_ignored_dirs="$2"
      shift
      ;;
    -l)
      is_list_mode=true
      ;;
    -v)
      is_verbose_list=true
      ;;
    -p)
      is_interactive_mode=true
      ;;
    -h)
      usage
      ;;
    -*)
      echo -e "${RED}Invalid option:${NC} $1" >&2
      usage
      ;;
    *)
      if [[ "$root_directory" != "$(pwd)" ]]; then
        echo -e "${RED}Error:${NC} Cannot specify multiple directories. Already set to '${BOLD}$root_directory${NC}'." >&2
        usage
      fi
      root_directory="$1"
      ;;
  esac
  shift
done

# Perform post-parsing validation
if [[ "$is_verbose_list" = true && "$is_list_mode" = false ]]; then
  echo -e "${RED}Error:${NC} The '-v' flag can only be used in conjunction with '-l'." >&2
  usage
fi

if [[ "$is_interactive_mode" = true && "$is_list_mode" = true ]]; then
  echo -e "${RED}Error:${NC} Interactive mode ('-p') and list mode ('-l') cannot be used together." >&2
  usage
fi

if [[ -n "$global_commit_message" ]]; then
  commit_message="$global_commit_message"
fi

all_ignored_dirs=("${default_ignored_dirs[@]}")
if [[ -n "$user_ignored_dirs" ]]; then
  IFS=',' read -ra user_dirs_array <<< "$user_ignored_dirs"
  all_ignored_dirs+=("${user_dirs_array[@]}")
fi

declare -A unique_dirs
for dir in "${all_ignored_dirs[@]}"; do
  unique_dirs["$dir"]=1
done
final_ignored_dirs=("${!unique_dirs[@]}")

# --- Core Script Logic ---

if [[ ! -d "$root_directory" ]]; then
  echo -e "${RED}Error:${NC} The specified directory '${BOLD}$root_directory${NC}' does not exist." >&2
  exit 1
fi

ignore_expression=""
for dir in "${final_ignored_dirs[@]}"; do
  ignore_expression+="-path */$dir -prune -o "
done

process_repos() {
  find "$root_directory" -type d \( $ignore_expression -false \) -o -name ".git" | while read git_dir; do
    repo_dir=$(dirname "$git_dir")
    
    if ! git -C "$repo_dir" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      continue
    fi
    
    has_changes=false
    if git -C "$repo_dir" status --porcelain | grep -q .; then
      has_changes=true
    fi
    
    if [[ "$is_list_mode" = true ]]; then
      # New: Show repository name regardless of changes
      if [[ "$has_changes" = true ]]; then
          echo -e "${YELLOW}Found pending changes in:${NC} ${BOLD}$repo_dir${NC}"
      else
          echo -e "No pending changes in: ${BOLD}$repo_dir${NC}"
      fi
      
      # If verbose, and there are changes, list the files
      if [[ "$is_verbose_list" = true && "$has_changes" = true ]]; then
        local changed_files=$( { git -C "$repo_dir" diff --name-status; git -C "$repo_dir" diff --name-status --staged; } | sort -u )
        echo "$changed_files" | awk '{print "  "$0}'
      fi
    elif [[ "$is_interactive_mode" = true ]]; then
      if [[ "$has_changes" = true ]]; then
        echo -e "\n${BOLD}--- Found pending changes in: ${CYAN}$repo_dir${NC}"
        
        echo -e "\n${BOLD}--- Unstaged changes:${NC}"
        git -C "$repo_dir" diff --color
        echo -e "\n${BOLD}--- Staged changes:${NC}"
        git -C "$repo_dir" diff --staged --color
        
        read -p "$(echo -e "${CYAN}Do you want to commit and push these changes? (y/n/s) [y=yes, n=no, s=skip all]: ${NC}")" -r user_choice
        
        case "$user_choice" in
          [Yy]* )
            read -p "$(echo -e "${CYAN}Enter custom commit message (default: \"$commit_message\"): ${NC}")" -r custom_message
            if [[ -z "$custom_message" ]]; then
              custom_message="$commit_message"
            fi
            if git -C "$repo_dir" add . && git -C "$repo_dir" commit -m "$custom_message" && git -C "$repo_dir" push; then
              echo -e "${GREEN}--- Successfully committed and pushed in ${BOLD}$repo_dir${NC}."
            else
              echo -e "${RED}--- Failed to commit or push in ${BOLD}$repo_dir${NC}. Please check manually."
            fi
            ;;
          [Nn]* )
            echo -e "${YELLOW}--- Skipping commit for ${BOLD}$repo_dir${NC}."
            ;;
          [Ss]* )
            echo -e "${YELLOW}--- Skipping ${BOLD}$repo_dir${NC} and all remaining repositories."
            exit 0
            ;;
          * )
            echo -e "${RED}--- Invalid input. Skipping ${BOLD}$repo_dir${NC}."
            ;;
        esac
      fi
    else
      if [[ "$has_changes" = true ]]; then
        echo -e "${BOLD}--- Entering repository:${NC} ${CYAN}$repo_dir${NC}"
        if git -C "$repo_dir" add . && git -C "$repo_dir" commit -m "$commit_message" && git -C "$repo_dir" push; then
          echo -e "${GREEN}--- Successfully committed and pushed in ${BOLD}$repo_dir${NC}."
        else
          echo -e "${RED}--- Failed to commit or push in ${BOLD}$repo_dir${NC}. Please check manually."
        fi
        echo -e "--- Finished with repository: ${CYAN}$repo_dir${NC}"
        echo ""
      fi
    fi
  done
}

if [[ "$is_list_mode" = true ]]; then
  echo -e "${BOLD}Listing all Git repositories in '${CYAN}$root_directory${NC}':"
  process_repos
elif [[ "$is_interactive_mode" = true ]]; then
  echo -e "${BOLD}Starting interactive Git commit and push...${NC}"
  echo -e "Root directory: ${CYAN}$root_directory${NC}"
  echo -e "Ignoring directories: ${YELLOW}${final_ignored_dirs[*]}${NC}"
  process_repos
  echo -e "${GREEN}Interactive process completed.${NC}"
else
  echo -e "${BOLD}Starting automated Git commit and push...${NC}"
  echo -e "Root directory: ${CYAN}$root_directory${NC}"
  echo -e "Using commit message: \"${BOLD}$commit_message${NC}\""
  echo -e "Ignoring directories: ${YELLOW}${final_ignored_dirs[*]}${NC}"
  echo ""
  process_repos
  echo -e "${GREEN}Script completed.${NC}"
fi
